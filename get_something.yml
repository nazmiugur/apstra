---
  ### ---------------------------------------------------------------------------
  ### APSTRA API AUTOMATION
  ### ---------------------------------------------------------------------------
  - hosts: localhost
    gather_facts: False
    connection: local
    roles:
      - { role: apstra_auth }

    tasks:
      - name: "Get Blueprint ID"
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints"
          method: GET
         # return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
        register: bp_ids


      - name: Retrieve Blueprint ID
        ansible.builtin.set_fact:
          bp_id: "{{ bp_ids.json | cleanup_bp_id(bp_name) }}"

      - name: show blueprint id
        ansible.builtin.debug:
          msg: "{{ bp_id }}"


      - name: Get security zones aka vrfs
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/nodes?node_type=security_zone"
          method: GET
          return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
          body_format: json
        register: securityzones

      
      - name: show security zones
        ansible.builtin.debug:
          msg: "{{ securityzones }}"

      - name: set security zone id
        ansible.builtin.set_fact:
          security_zone: "{{ securityzones.json | cleanup_security_zone(vrf_name) }}"


      - name: show node_system
        ansible.builtin.debug:
          msg: "{{ security_zone }}"


      - name: Get virtual networks
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/nodes?node_type=virtual_network"
          method: GET
          return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
          body_format: json
        register: vns



      - name: set vn id
        ansible.builtin.set_fact:
          vn_id: "{{ vns.json | cleanup_vn_ids(vn_name) }}"
          
      - name: show vn id
        ansible.builtin.debug:
          msg: "{{ vn_id }}"


      - name: send specific query       
        uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/qe?type=staging"
          method: POST
          return_content: yes
          status_code: 200
          headers:
            Content-Type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          # body: {"query": "match(node('system', name='leaf', role='leaf', label='isa_single_leaf_001_leaf1'))"}
          body: {"query": "match(node('system', name='leaf', role='leaf', label='leaf2'))"}
          force_basic_auth: yes
          body_format: json
        register: tstqry
        run_once: True
      
      - name: show specific query
        ansible.builtin.debug:
          msg: "{{ tstqry.json['items'][0] }}"




