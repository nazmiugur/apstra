---
  ### ---------------------------------------------------------------------------
  ### APSTRA API AUTOMATION
  ### ---------------------------------------------------------------------------
  - hosts: localhost
    gather_facts: True
    connection: local
    roles:
      - { role: apstra_auth }

    tasks:
      - name: "Get Blueprint ID"
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints"
          method: GET
         # return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
        register: bp_ids


      - name: Retrieve Blueprint ID
        ansible.builtin.set_fact:
          bp_id: "{{ bp_ids.json | cleanup_bp_id(bp_name) }}"




      - name: set timedate to get consistency accross the collected data
        ansible.builtin.set_fact:
          datetime_of_pb: "{{ ansible_date_time['iso8601_basic'] }}"




      - name: Get dcn_routingzone table from PostgreSQL
        postgresql_query:
          db: "{{ pg_login_db }}"
          login_user: "{{ pg_login_user }}"
          login_password: "{{ pg_login_password }}"
          login_host: "{{ pg_login_host }}"
          query: SELECT (blueprint_id, remote_id) FROM {{ sz_tablename }}
        register: szs_table

      - name: show rz_table
        ansible.builtin.set_fact:
          szs_bp_rmids: "{{ szs_table.query_result | unique | select | list }}"




      
      - name: show rz_table consolidated
        ansible.builtin.debug:
          msg: "{{ szs_bp_rmids }}"        




      - name: Get security zones from apstra
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/nodes?node_type=security_zone"
          method: GET
          return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
          body_format: json
        register: szs

      - name: show security zones apstra structured data
        ansible.builtin.debug:
          msg: "{{ szs.json['nodes'] }}"





      - name: show presql data
        ansible.builtin.debug:
          msg: "{{ szs.json['nodes'] |  get_seczones_pgsql_ready_format(bp_id, szs_bp_rmids) }}"


      - name: set systems_info to seed postgresql template file
        ansible.builtin.set_fact:
          szs_info: "{{ szs.json['nodes'] |  get_seczones_pgsql_ready_format(bp_id, szs_bp_rmids) }}"

      - name: Insert routing zones a.k.a security zones  information into PostgreSQL to tale dcn_routing zone
        postgresql_query:
          db: "{{ pg_login_db }}"
          login_user: "{{ pg_login_user }}"
          login_password: "{{ pg_login_password }}"
          login_host: "{{ pg_login_host }}"
          query: "{{ lookup('ansible.builtin.template', './templates/pgsql-q-insert-seczones.j2') }}"
        when: szs_info[0] != []



      - name: Delete routing zones that does not exist in apstra but postgresql
        postgresql_query:
          db: "{{ pg_login_db }}"
          login_user: "{{ pg_login_user }}"
          login_password: "{{ pg_login_password }}"
          login_host: "{{ pg_login_host }}"
          query: "{{ lookup('ansible.builtin.template', './templates/pgsql-q-insert-seczones.j2') }}"
        when: szs_info[1] != []


