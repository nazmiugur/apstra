---
  ### ---------------------------------------------------------------------------
  ### APSTRA API AUTOMATION
  ### ---------------------------------------------------------------------------
  - hosts: localhost
    gather_facts: False
    connection: local
    roles:
      - { role: apstra_auth }

    tasks:
      - name: "Get Blueprint ID"
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints"
          method: GET
         # return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
        register: bp_ids


      - name: Retrieve Blueprint ID
        ansible.builtin.set_fact:
          bp_id: "{{ bp_ids.json | cleanup_bp_id(bp_name) }}"



      - name: Get virtual networks
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/nodes?node_type=virtual_network"
          method: GET
          return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
          body_format: json
        register: vns


      



      - name: "Get interfaces"
        uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/nodes?node_type=interface"
          method: GET
          return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
          body_format: json
        register: interfaces
              
      - name: create list
        ansible.builtin.set_fact:
          connections: []

      - name: summary connections
        ansible.builtin.set_fact:
           connections: "{{ connections + [ item.value.id + ',' + item.value.if_name + ',' + item.value.description ] }}"
        ignore_errors: yes
        when: 
          - item.value.id != None
          - item.value.if_name != None
          - item.value.description != None    
        loop: "{{ interfaces.json.nodes | dict2items }}"  

      - name: show connections
        ansible.builtin.debug:
          msg: "{{ connections }}"

      - name: "Get switches"
        uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/nodes?node_type=system"
          method: GET
          return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
          body_format: json
        register: systems
        
      
      - name: show connections
        ansible.builtin.debug:
          msg: "{{ interfaces }}"

      - name: show systems
        ansible.builtin.debug:
          msg: "{{ systems.json }}"


      - name: send specific query2
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/obj-policy-application-points"
          method: POST
          return_content: yes
          status_code: 201
          headers:
            Content-Type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          body: { 'rack': 'apstra_single_001', 'rack_tags': '' }
          force_basic_auth: yes
          body_format: json
        register: tstqry2
        ignore_errors: true
        run_once: True


