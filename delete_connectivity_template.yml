---
  ### ---------------------------------------------------------------------------
  ### APSTRA API AUTOMATION
  ### ---------------------------------------------------------------------------
  - hosts: localhost
    gather_facts: False
    connection: local
    roles:
      - { role: apstra_auth }

    tasks:
      - name: "Get Blueprint ID"
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints"
          method: GET
         # return_content: yes
          status_code: 200
          headers:
            content-type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
        register: bp_ids


      - name: Retrieve Blueprint ID
        ansible.builtin.set_fact:
          bp_id: "{{ bp_ids.json | cleanup_bp_id(bp_name) }}"



      - name: send specific query to get the ct_name
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/qe?type=staging"
          method: POST
          return_content: yes
          status_code: 200
          headers:
            Content-Type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          body: {"query": "match(node('ep_endpoint_policy', name='{{ ct_name }}'))"}
          force_basic_auth: yes
          body_format: json
        register: tstqry
        run_once: True


      - name: narrow down the ct_name list
        ansible.builtin.set_fact:
          ct_name_list: "{{ tstqry.json | dict2items }}"

      - name: show ct_nams
        ansible.builtin.debug:
          msg: "{{ item[ct_name].id }}"
        loop: "{{ ct_name_list[0].value }}"
      
      - name: create ct_name list id variable
        ansible.builtin.set_fact:
          ct_name_list_id: []


      - name: ct_name list with id
        ansible.builtin.set_fact:
           ct_name_list_id: "{{ ct_name_list_id + [ item[ct_name].id ] }}"
        ignore_errors: yes
        when:
          - item[ct_name].id != None and item[ct_name].label == ct_name
        loop: "{{ ct_name_list[0].value }}"


      - name: show ct_names with id
        ansible.builtin.debug:
          msg: "{{ item }}" 
        loop: "{{ ct_name_list_id }}"

      - name: delete connectivity template with ct_name
        ansible.builtin.uri:
          url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/endpoint-policies/{{ item }}?delete_recursive=true"
          method: DELETE
          #  return_content: yes
          status_code: 204
          headers:
            Content-Type: "application/json"
            AUTHTOKEN: "{{ login.json.token }}"
          validate_certs: false
          force_basic_auth: yes
        loop: "{{ ct_name_list_id }}"

